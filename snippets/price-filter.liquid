{% comment %}
  Renders a collection price filter facet

  Accepts:
  - filter : {Object} a price filter on the collection


  Usage: {% render 'price-filter', filter: filter  %}
{% endcomment %}
{% comment %}
  {% assign max_price_cents = 21999 %}

  {% assign rounding_factor = 1 %}

  {% if max_price_cents < 100 %}
    {% assign rounding_factor = 10 %}
  {% elsif max_price_cents < 1000 %}
    {% assign rounding_factor = 100 %}
  {% elsif max_price_cents < 10000 %}
    {% assign rounding_factor = 1000 %}
  {% else %}
    {% assign rounding_factor = 10000 %}
  {% endif %}


  <!-- Calculate the number of digits in max_price_cents -->
  {% assign number_of_digits = max_price_cents | ceil | ceil %}

  <!-- Calculate the rounding factor dynamically based on the number of digits -->
  {% assign rounding_factor = 10 | times: number_of_digits | divided_by: 10 %}

  {% assign rounded_max = max_price_cents | divided_by: rounding_factor | ceil | times: rounding_factor %}
  {% assign gap = rounded_max | divided_by: 5 | divided_by: rounding_factor | ceil | times: rounding_factor %}

  <!-- Output -->
  Rounded Max: {{ rounded_max }} Gap: {{ gap }}
{% endcomment %}

{% liquid
  if price_groups == blank
    assign max_price_cents = filter.range_max
    assign min_price_cents = 0
    assign temp_price = max_price_cents | minus: 1
    assign rounding_factor = 1

    for i in (1..10)
      assign temp_price = temp_price | divided_by: 10
      assign rounding_factor = rounding_factor | times: 10

      if temp_price < 10
        break
      endif
    endfor

    assign inverse_divisor = rounding_factor | times: 1.0
    assign inverse_factor = 1 | divided_by: inverse_divisor

    assign rounded_max = max_price_cents | times: inverse_factor | ceil | times: inverse_divisor | round
    assign gap = rounded_max | divided_by: 5 | times: inverse_factor | ceil | times: rounding_factor

    assign price_ranges = ''

    assign current_min = min_price_cents
    assign current_max = gap

    for i in (1..5)
      assign current_max = current_min | plus: gap
      if current_max > rounded_max
        assign current_max = rounded_max
      endif

      assign range = current_min | append: '-' | append: current_max

      if forloop.first
        assign price_ranges = range
      else
        assign price_ranges = price_ranges | append: ',' | append: range
      endif

      assign current_min = current_max
      if current_min >= rounded_max
        break
      endif
    endfor

    assign price_groups = price_ranges | split: ','
  endif
%}

<ul
  class="{{ visual_layout_class }} facets__list--vertical list-unstyled"
  role="list"
>
  {%- for group in price_groups -%}
    {% liquid
      assign group_values = group | split: '-'
      assign lower_limit = group_values[0]
      assign upper_limit = group_values[1]

      assign lower_price = lower_limit | money
      assign upper_price = upper_limit | money

      assign lower_group_value = lower_limit | divided_by: 100
      assign upper_group_value = upper_limit | divided_by: 100

      assign group_value = lower_group_value | append: '-' | append: upper_group_value
      assign label = lower_price | append: ' - ' | append: upper_price

      assign filter_name = filter.param_name | split: '.' | last | downcase
      assign input_id = id_prefix | append: filter_name | append: group
      assign name = 'filter.v.price'
    %}

    {%- capture text_value -%}
      <span class="facet-checkbox__text leading-[18px]" aria-hidden="true">
        <span class="facet-checkbox__text-label text-body-xs text-black">{{- label | escape }}</span> 
      </span>
    {%- endcapture -%}

    <li class="list-menu__item facets__item py-mini {% if forloop.index > show_more_number %} show-more-item hidden{% endif %}">
      {% render 'price-select', name: name, value: group_value, id: input_id, text_value: text_value %}
    </li>
  {%- endfor -%}
</ul>
